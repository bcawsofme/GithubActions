name: Build Release

on:
  workflow_call:
    inputs:
      ref:
        type: string
        default: ''
        required: false
      artifact-name:
        type: string
        required: true
      current-version:
        type: string
        required: true
      previous-version:
        type: string
        required: true
      image-tag: 
        type: string
        required: true
    secrets:
      GITHUB_TOKEN:
        required: true

permissions:
  contents: write
  actions: read
  packages: read

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    steps: 
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.event.inputs.ref }}

    - name: Download Published Artifact
      uses: actions/download-artifact@v4
      with:
        path: ./dist

    - name: Archive Artifact
      uses: thedoctor0/zip-release@master
      with:
        type: "zip"
        filename: "${{ inputs.artifact-name }}.zip"
        directory: "dist"

    - name: Generate Release Notes
      shell: pwsh
      id: generate-changelog
      run: |
        function GetFilteredTags {
          param (
              [string]$version
          )
          $prefix = if ($version -like 'v*') { 'v' } else { 'mt' }
          $version = $version -replace "^$prefix"
          git tag | Where-Object { $_ -match "^$prefix$version" } | Sort-Object -Property {[Version]($_ -replace "^$prefix")}
        }
        
        function GenerateChangelog {
          param (
              [string]$startVersion,
              [string]$endVersion
          )
        
          $isCommitHash = $startVersion -match '^[0-9a-f]{40}$'
          $changelog = "Image Tag: ${{ inputs.image-tag }} `n---`n"
          if ($isCommitHash) {
            $changes = git log --oneline --pretty=format:"%h %s" "$startVersion..$endVersion"
          } else {
            $changes = git log --oneline --pretty=format:"%h %s" "$startVersion..$endVersion"
          }
          $changelog += ($changes -split "`n" | ForEach-Object { "  $_" }) -join "`n"
          return $changelog
        }
        
        $currentVersion = "${{ inputs.current-version }}"
        $previousVersion = "${{ inputs.previous-version }}"
        $lastCommitHash = git rev-parse HEAD
        
        $lastReleaseTag = GetFilteredTags $previousVersion | Select-Object -Last 1
        if (-not $lastReleaseTag) {
          $lastReleaseTag = GetFilteredTags $currentVersion | Select-Object -First 1
        }
        $newReleaseTag = GetFilteredTags $currentVersion | Select-Object -Last 1
        if (-not $newReleaseTag) {
            $newReleaseTag = $lastCommitHash
        }
        
        $changelogString = GenerateChangelog $lastReleaseTag $newReleaseTag
        $changelogString | Out-File -FilePath "release.txt"
        
    - name: Create GitHub Release
      id: create-new-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ inputs.current-version }}
        release_name: Release MT ASSP ${{ inputs.current-version }}
        prerelease: true
        body_path: release.txt 

    - name: Upload Artifact to GitHub Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-new-release.outputs.upload_url }}
        asset_path: "dist/${{ inputs.artifact-name }}.zip"
        asset_name: ${{ inputs.artifact-name }}.${{ inputs.current-version }}.zip
        asset_content_type: application/zip

  add-artifact:
    name: Add Artifact to Release
    runs-on: ubuntu-latest
    steps: 
    - name: Checkout GitHub Action with Ref
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ inputs.ref }}

    - name: Download Published Artifact
      uses: actions/download-artifact@v4
      with:
        path: ./dist

    - name: Archive Artifact
      uses: thedoctor0/zip-release@master
      with:
        type: "zip"
        filename: "${{ inputs.artifact-name }}.zip"
        directory: "dist"

    - name: Get GitHub Release
      id: release
      uses: joutvhu/get-release@v1
      with:
        tag_name: ${{ inputs.current-version }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    ## HOW AM I GOING TO ADD CAREERS TO THE RELEASE NOTES?!?!?!?!?!
    - name: Update GitHub Release Changelog
      id: update_release
      uses: tubone24/update_release@v1.0
      env:
        GITHUB_TOKEN: ${{ github.token }}
        TAG_NAME:
      with:
        body: 

    - name: Upload Artifact to GitHub Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.release.outputs.upload_url }}
        asset_path: "dist/${{ inputs.artifact-name }}.zip"
        asset_name: ${{ inputs.artifact-name }}.${{ inputs.current-version }}.zip
        asset_content_type: application/zip